[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Over 150 attendees at the PSI conference player the Exploristics Higher or Lower web app - and didn‚Äôt they all do well!? I was delighted to see the game generated so much interest, many people expressed an interest in the how we deployed the app on the cloud and that‚Äôs the motivation for this blog. This app is a microcosm of developing and deploying a Statistical Shiny app on the cloud. This blog is aimed at people who are experienced in developing desktop R scripts and have a desire to take the next step to create a Shiny app and deploy on the cloud.\nThe premise of our app was simply to act as a hook to encourage attendees to visit the Exploristics stand and learn more about the products and services we offer. The challenge was to gather requirements, design, develop, implement, test and deploy an application that was a simple game in only a few days!\nThe Higher of Lower game is based on the classic card game: an initial card is drawn from a standard deck of cards. Another card is then drawn from the deck and the player must guess if this drawn card will be of higher or lower value than the initial card. From a statistical perspective this is quite a simple process ‚Äì random sampling without replacement of the deck and a logic-based approach of the guess. Although the statistical method and issues faced may seem trivial, they provide tangible examples of many of common issues faced and I attempt to generalize the solutions. When you attempt to deploy more complex statistical models it‚Äôll be easier to identify the issues you‚Äôre facing, how to debug your code and solver your problems.\nAt Exploristics we use Shiny apps to provide dynamic and interactive visualization tools to enable clients to interpret the complex multi-dimensional data or models generated by KerusCloud. At the Jumping Rivers Shiny in Production conference, I spoke about the experiences and technology to create robust enterprise grade Shiny applications. However, the remit for the Higher or Lower application was very different from how we usually develop software ‚Äì this was to be a one-off application to be used at the PSI conference and we only had a couple of days for development. This mean that many of our usual processes needed to be accelerated and we had to accept some trade-offs.\nAlthough we have experience in developing Shiny apps using a new technology such as Shinyapps.io usually leads to unexpected changes that take time to resolve. The time frame was extremely short to deal with any technology issues and ¬†address any feedback from stakeholders. However, as our preliminary research into Shinyapps.io looked promising we decided to have a go!.\n‚ÄúIf I have seen further than others, it is by standing upon the shoulders of giants.‚Äù\nIsaac Newton\nR and Shiny are open source and supported by a vibrant and passionate community of individuals. Without the years of effort and innovation from these individuals I would not have been able to deliver the app within our timescales. Any difficulty I faced on my part is not a criticism of these individuals but rather my experience under extremely tight time constraints that resulted in a limited amount of time to research appropriate solutions."
  },
  {
    "objectID": "blog.html#how-should-i-structure-my-code",
    "href": "blog.html#how-should-i-structure-my-code",
    "title": "Blog",
    "section": "How should I structure my code?",
    "text": "How should I structure my code?\nThere are multiple ways to structure the files of a Shiny application and deciding which is the best often comes with experience or researching the best approach based upon your use case. I‚Äôd previously had the privilege of presenting along with Colin Fay at the Jumping Rivers Shiny in Production Conference and have read his book Engineering Production Grade Shiny apps but had never formally used the golem üì¶. This provided me an opportunity to test out this framework and bring any lessons learnt into other Shiny apps.\nUsing the golem üì¶ package for the first time was a delight, it created much of the boiler plate code for the application, provided functions to carry out common tasks and laid out the process in a systematic order to follow. This enforced good practice such as modularization of code and enabled me to rapidly write production quality code. I‚Äôve previously developed production grade Shiny apps and was already very familiar concepts such as Shiny modules. I‚Äôd really recommend reading Colins book as it articulates and conceptualizes many of the issues I have faced. My biggest take home message from the book is ‚Äì ‚ÄúDon‚Äôt jump straight into coding!‚Äù"
  },
  {
    "objectID": "blog.html#how-do-i-store-and-retrieve-data",
    "href": "blog.html#how-do-i-store-and-retrieve-data",
    "title": "Blog",
    "section": "How do I store and retrieve data?",
    "text": "How do I store and retrieve data?\nShiny apps are transient by design and sessions don‚Äôt persist. ¬†This means that all information is lost between using the app. Therefore, if you wish to store information that the app needs to access in the future or provide a central data store you need to provide your own persistent data storage. There‚Äôs a great article on Posit for doing providing persistent data storage. For someone used to working on a desktop computer this is an unusual concept as you always have access to your hard-drive and by in large don‚Äôt need to worry about access.\nUsually, we use AWS S3 as our storage solution, but we didn‚Äôt want set up and manage access credentials for a one off project so decided to use Googlesheets as it was well documented and the package was actively developed. Whilst we got this to work locally, we could not get the authorization to work on Shinyapps.io and so decided to use rdrop2 üì¶ instead.\nThe rdrop2 üì¶ has no maintainer on CRAN so we had some initial reservations and we had to write some custom functionality to have refresh-able credentials. This cost us over a day‚Äôs development time which in the timescales of our project was huge!\nGoing forward we will assess the Pins üì¶ or use AWS S3, though the AWS solutions is not be suitable for people wanting to avoid a paid for service, although it has a free tier with limited usage."
  },
  {
    "objectID": "blog.html#failure-to-build.what-do-you-mean",
    "href": "blog.html#failure-to-build.what-do-you-mean",
    "title": "Blog",
    "section": "Failure to build‚Ä¶.what do you mean!?",
    "text": "Failure to build‚Ä¶.what do you mean!?\nWhen working with an application, it‚Äôs a very iterative process and when you are inexperienced with the technology or rushing this can lead to lots of simple mistakes. Within a Shiny application this can mean the package fails to build, or a failure at the deployment stage or the application crashing when in use. This can be a frustrating process to those not used to it as it can take several minutes to go through these processes before realizing you‚Äôve just nested a bracket in the wrong place!\nThis can lead to taking shortcuts in manual testing of an application which allows bugs to creep in and only manifest when in production. Structuring your application as a package allows you to leverage resources such as unit testing using testthat üì¶ or shinytest2 üì¶ and automate the testing process, saving time and enforcing that these tests are carried out.\nIn this project, I often found that I would add a package on my computer but forget to add it to the DESCRIPTION file, this would result in the package not being accessible to the app on Shinyapps.io and failing to build and deploy. To the uninitiated this can be a frustrating experience as identifying the issue often takes much longer than implementing a solution."
  },
  {
    "objectID": "blog.html#but-it-works-on-my-machine",
    "href": "blog.html#but-it-works-on-my-machine",
    "title": "Blog",
    "section": "But it works on my machine!",
    "text": "But it works on my machine!\nAnother issue that is conceptually different for those used to developing on the desktop is that different environments can result in an app working on your computer but not in the cloud. This is a very common occurrence in software development which can arise from having different or missing environment variables or the file system being different.\nOne issue that I had was that the setting of options required for the ‚Äúgargle‚Äù package were silently being dropped when deployed on Shinyapps.io . This mean that locally I could get security tokens to work but they were failing on Shinyapps.io. This was a difficult issue to identify especially as the interactive debugging methods on a desktop can‚Äôt be used on a cloud-based environment. This requires the use of the logs to identify the issue."
  },
  {
    "objectID": "blog.html#youre-not-meant-to-use-the-app-that-way",
    "href": "blog.html#youre-not-meant-to-use-the-app-that-way",
    "title": "Blog",
    "section": "You‚Äôre not meant to use the app that way!",
    "text": "You‚Äôre not meant to use the app that way!\nWhen you develop and subsequently test an application you have an inherent idea of how it should be used. Different people will have a range of IT abilities or understanding of terminology. This often leads to the application being used in a way you hadn‚Äôt anticipated, or they hit an unusual use case from a scenario that your testing hadn‚Äôt encountered.\nWhen testing the game I‚Äôd only played from start to finish and then redeployed with subsequent changes. What I hadn‚Äôt realized was that my application had state, I‚Äôd reset the user details after each game but not the deck of cards. ¬†Effectively this meant a single deck of cards was used across games and eventually there were no more cards to draw from the deck ‚Äì and this caused the game to crash.\nI really enjoyed making the Exploristics Higher or Lower app and I hope everyone enjoyed playing it too. Hopefully the lessons learnt by me will help you on your journey to creating interactive tools for your clients!\nFollow Exploristics on Twitter or LinkedIn to get the latest updates clinical trail simulation, interactive data visualization and the"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "I‚Äôve been working with Free Open Source Software and programming languages for over a decade and found it to be the an extremely passionate and open community. During this time I‚Äôve made lots of mistakes and often several times!\nThere‚Äôs a lot of good technical resources online but what I‚Äôve found when speaking to junior staff there‚Äôs less information on the experiences and expectations. Senior staff didn‚Äôt get to their technical ability without many frustrations and these are ok!\nI‚Äôve found software development is a very risk averse industry. Requirements are gathered up front and making a seemingly simple change can have cascading effects on the software which leads to individuals wanting to work within very defined boundaries. Having two children of my own I‚Äôve learnt that the only way to learn is to make mistakes! If you only did what you know you could do, you‚Äôd never learn to crawl, walk or talk. Children will happily fall over a dozen times in a row but eventually they‚Äôll be walking.\nI‚Äôve done a lot of in-house lunchtime knowledge transfer sessions, these were generally aimed at novice R users wanting to improve their analysis scripts through writing functions or packages. Bringing these together online will hopefully be of use to novice users. They‚Äôre not aimed at being a definitive resource but an alternative explanation to technical documentation, providing the minimal steps people require to get a functional benefit."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Gareth Burns",
    "section": "",
    "text": "Queen‚Äôs University, Belfast | Belfast, UK PhD in Computational Biology | Sept 2009 - December 2012\nQueen‚Äôs University, Belfast | Belfast, UK B.Sc Hons in Environmental Biology | Sept 2004 - June 2007"
  },
  {
    "objectID": "posts/DeployingShiny.html",
    "href": "posts/DeployingShiny.html",
    "title": "Planning, Implementing, Developing & Deploying in Days!",
    "section": "",
    "text": "Over 150 attendees at the PSI conference player the Exploristics Higher or Lower web app - and didn‚Äôt they all do well!? I was delighted to see the game generated so much interest, many people expressed an interest in the how we deployed the app on the cloud and that‚Äôs the motivation for this blog. This app is a microcosm of developing and deploying a Statistical Shiny app on the cloud. This blog is aimed at people who are experienced in developing desktop R scripts and have a desire to take the next step to create a Shiny app and deploy on the cloud.\nThe premise of our app was simply to act as a hook to encourage attendees to visit the Exploristics stand and learn more about the products and services we offer. The challenge was to gather requirements, design, develop, implement, test and deploy an application that was a simple game in only a few days!\nThe Higher of Lower game is based on the classic card game: an initial card is drawn from a standard deck of cards. Another card is then drawn from the deck and the player must guess if this drawn card will be of higher or lower value than the initial card. From a statistical perspective this is quite a simple process ‚Äì random sampling without replacement of the deck and a logic-based approach of the guess. Although the statistical method and issues faced may seem trivial, they provide tangible examples of many of common issues faced and I attempt to generalize the solutions. When you attempt to deploy more complex statistical models it‚Äôll be easier to identify the issues you‚Äôre facing, how to debug your code and solver your problems.\nAt Exploristics we use Shiny apps to provide dynamic and interactive visualization tools to enable clients to interpret the complex multi-dimensional data or models generated by KerusCloud. At the Jumping Rivers Shiny in Production conference, I spoke about the experiences and technology to create robust enterprise grade Shiny applications. However, the remit for the Higher or Lower application was very different from how we usually develop software ‚Äì this was to be a one-off application to be used at the PSI conference and we only had a couple of days for development. This mean that many of our usual processes needed to be accelerated and we had to accept some trade-offs.\nAlthough we have experience in developing Shiny apps using a new technology such as Shinyapps.io usually leads to unexpected changes that take time to resolve. The time frame was extremely short to deal with any technology issues and ¬†address any feedback from stakeholders. However, as our preliminary research into Shinyapps.io looked promising we decided to have a go!.\n‚ÄúIf I have seen further than others, it is by standing upon the shoulders of giants.‚Äù\nIsaac Newton\nR and Shiny are open source and supported by a vibrant and passionate community of individuals. Without the years of effort and innovation from these individuals I would not have been able to deliver the app within our timescales. Any difficulty I faced on my part is not a criticism of these individuals but rather my experience under extremely tight time constraints that resulted in a limited amount of time to research appropriate solutions."
  },
  {
    "objectID": "posts/DeployingShiny.html#how-should-i-structure-my-code",
    "href": "posts/DeployingShiny.html#how-should-i-structure-my-code",
    "title": "Planning, Implementing, Developing & Deploying in Days!",
    "section": "How should I structure my code?",
    "text": "How should I structure my code?\nThere are multiple ways to structure the files of a Shiny application and deciding which is the best often comes with experience or researching the best approach based upon your use case. I‚Äôd previously had the privilege of presenting along with Colin Fay at the Jumping Rivers Shiny in Production Conference and have read his book Engineering Production Grade Shiny apps but had never formally used the golem üì¶. This provided me an opportunity to test out this framework and bring any lessons learnt into other Shiny apps.\nUsing the golem üì¶ package for the first time was a delight, it created much of the boiler plate code for the application, provided functions to carry out common tasks and laid out the process in a systematic order to follow. This enforced good practice such as modularization of code and enabled me to rapidly write production quality code. I‚Äôve previously developed production grade Shiny apps and was already very familiar concepts such as Shiny modules. I‚Äôd really recommend reading Colins book as it articulates and conceptualizes many of the issues I have faced. My biggest take home message from the book is ‚Äì ‚ÄúDon‚Äôt jump straight into coding!‚Äù"
  },
  {
    "objectID": "posts/DeployingShiny.html#how-do-i-store-and-retrieve-data",
    "href": "posts/DeployingShiny.html#how-do-i-store-and-retrieve-data",
    "title": "Planning, Implementing, Developing & Deploying in Days!",
    "section": "How do I store and retrieve data?",
    "text": "How do I store and retrieve data?\nShiny apps are transient by design and sessions don‚Äôt persist. ¬†This means that all information is lost between using the app. Therefore, if you wish to store information that the app needs to access in the future or provide a central data store you need to provide your own persistent data storage. There‚Äôs a great article on Posit for doing providing persistent data storage. For someone used to working on a desktop computer this is an unusual concept as you always have access to your hard-drive and by in large don‚Äôt need to worry about access.\nUsually, we use AWS S3 as our storage solution, but we didn‚Äôt want set up and manage access credentials for a one off project so decided to use Googlesheets as it was well documented and the package was actively developed. Whilst we got this to work locally, we could not get the authorization to work on Shinyapps.io and so decided to use rdrop2 üì¶ instead.\nThe rdrop2 üì¶ has no maintainer on CRAN so we had some initial reservations and we had to write some custom functionality to have refresh-able credentials. This cost us over a day‚Äôs development time which in the timescales of our project was huge!\nGoing forward we will assess the Pins üì¶ or use AWS S3, though the AWS solutions is not be suitable for people wanting to avoid a paid for service, although it has a free tier with limited usage."
  },
  {
    "objectID": "posts/DeployingShiny.html#failure-to-build.what-do-you-mean",
    "href": "posts/DeployingShiny.html#failure-to-build.what-do-you-mean",
    "title": "Planning, Implementing, Developing & Deploying in Days!",
    "section": "Failure to build‚Ä¶.what do you mean!?",
    "text": "Failure to build‚Ä¶.what do you mean!?\nWhen working with an application, it‚Äôs a very iterative process and when you are inexperienced with the technology or rushing this can lead to lots of simple mistakes. Within a Shiny application this can mean the package fails to build, or a failure at the deployment stage or the application crashing when in use. This can be a frustrating process to those not used to it as it can take several minutes to go through these processes before realizing you‚Äôve just nested a bracket in the wrong place!\nThis can lead to taking shortcuts in manual testing of an application which allows bugs to creep in and only manifest when in production. Structuring your application as a package allows you to leverage resources such as unit testing using testthat üì¶ or shinytest2 üì¶ and automate the testing process, saving time and enforcing that these tests are carried out.\nIn this project, I often found that I would add a package on my computer but forget to add it to the DESCRIPTION file, this would result in the package not being accessible to the app on Shinyapps.io and failing to build and deploy. To the uninitiated this can be a frustrating experience as identifying the issue often takes much longer than implementing a solution."
  },
  {
    "objectID": "posts/DeployingShiny.html#but-it-works-on-my-machine",
    "href": "posts/DeployingShiny.html#but-it-works-on-my-machine",
    "title": "Planning, Implementing, Developing & Deploying in Days!",
    "section": "But it works on my machine!",
    "text": "But it works on my machine!\nAnother issue that is conceptually different for those used to developing on the desktop is that different environments can result in an app working on your computer but not in the cloud. This is a very common occurrence in software development which can arise from having different or missing environment variables or the file system being different.\nOne issue that I had was that the setting of options required for the ‚Äúgargle‚Äù package were silently being dropped when deployed on Shinyapps.io . This mean that locally I could get security tokens to work but they were failing on Shinyapps.io. This was a difficult issue to identify especially as the interactive debugging methods on a desktop can‚Äôt be used on a cloud-based environment. This requires the use of the logs to identify the issue."
  },
  {
    "objectID": "posts/DeployingShiny.html#youre-not-meant-to-use-the-app-that-way",
    "href": "posts/DeployingShiny.html#youre-not-meant-to-use-the-app-that-way",
    "title": "Planning, Implementing, Developing & Deploying in Days!",
    "section": "You‚Äôre not meant to use the app that way!",
    "text": "You‚Äôre not meant to use the app that way!\nWhen you develop and subsequently test an application you have an inherent idea of how it should be used. Different people will have a range of IT abilities or understanding of terminology. This often leads to the application being used in a way you hadn‚Äôt anticipated, or they hit an unusual use case from a scenario that your testing hadn‚Äôt encountered.\nWhen testing the game I‚Äôd only played from start to finish and then redeployed with subsequent changes. What I hadn‚Äôt realized was that my application had state, I‚Äôd reset the user details after each game but not the deck of cards. Effectively this meant a single deck of cards was used across games and eventually there were no more cards to draw from the deck ‚Äì and this caused the game to crash.\nI really enjoyed making the Exploristics Higher or Lower app and I hope everyone enjoyed playing it too. Hopefully the lessons learnt by me will help you on your journey to creating interactive tools for your clients!\nFollow Exploristics on Twitter or LinkedIn to get the latest updates clinical trail simulation, interactive data visualization and the"
  },
  {
    "objectID": "blogs.html",
    "href": "blogs.html",
    "title": "Blogs",
    "section": "",
    "text": "Planning, Implementing, Developing & Deploying in Days!\n\n\n\n\n\nThis was a simple Shiny application deployed on Shinyapps.io that highlighted some of the lessons learnt in going from desktop analysis to deploying on cloud.\n\n\n\n\n\n\nMay 22, 2021\n\n\nGareth Burns\n\n\n\n\n\n\nNo matching items"
  }
]